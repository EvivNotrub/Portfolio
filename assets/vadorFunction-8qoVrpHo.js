const n=o=>{o.forEach(t=>{let e=t.media.mediaText;e.includes("light")?e=e.replace("light","dark"):e.includes("dark")&&(e=e.replace("dark","light")),t.media.mediaText=e})};function c(o){const t=[],e=o.cssRules;for(let s=0;s<e.length;s++){const r=e[s];r.media&&r.media.mediaText.includes("prefers-color-scheme")&&t.push(r)}return t}function l(){const o=document.styleSheets,t=o.length;for(let e=0;e<t;e++)try{const s=o[e],r=c(s);n(r)}catch(s){const r=o[e].href;console.warn(r+" broke something with theme toggle : "+s)}}function h(o){const t=document.querySelector('meta[name="color-scheme"]');t?t.setAttribute("content",o?"dark":"light"):document.head.insertAdjacentHTML("beforeend",`<meta name="color-scheme" content="${o?"dark":"light"}">`),o===null&&document.querySelector('meta[name="color-scheme"]').setAttribute("content","dark light")}const a=async o=>{try{await new Promise((e,s)=>{o.onload=e,o.onerror=s});const t=o.sheet;if(!t){console.error("Failed to retrieve stylesheet from node.");return}try{const e=c(t);n(e)}catch(e){const s=t.href;console.warn(s+" broke something with theme toggle : "+e)}}catch(t){console.error("Failed to load stylesheet:",t)}};export{a as adjustStylesheetForThemeMode,h as setMetaColorScheme,l as switch_theme_rules};
